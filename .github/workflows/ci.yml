name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: ./itf-py
      run: poetry install --no-interaction --no-root

    - name: Install project
      working-directory: ./itf-py
      run: poetry install --no-interaction

    - name: Run tests with pytest
      working-directory: ./itf-py
      run: poetry run pytest --cov=src/itf_py --cov-report=xml --cov-report=term-missing
    
    - name: Run tests with markdown-pytest
      working-directory: ./
      run: poetry run pytest -v README.md

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./itf-py/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.12-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: ./itf-py
      run: poetry install --no-interaction --no-root

    - name: Install project
      working-directory: ./itf-py
      run: poetry install --no-interaction

    - name: Check code formatting with Black
      working-directory: ./itf-py
      run: poetry run black --check --diff .

    - name: Check import sorting with isort
      working-directory: ./itf-py
      run: poetry run isort --check-only --diff .

    - name: Lint with flake8
      working-directory: ./itf-py
      run: poetry run flake8 src tests

    - name: Type check with mypy
      working-directory: ./itf-py
      run: poetry run mypy src

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest

    - name: Build package
      working-directory: ./itf-py
      run: poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: itf-py/dist/
