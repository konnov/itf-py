name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Needed to create releases and push tags
      pull-requests: write  # Needed to create PRs

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest

    - name: Configure git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Bump version and get new version
      working-directory: ./itf-py
      run: |
        # Bump version
        poetry version ${{ github.event.inputs.version_bump }}
        NEW_VERSION=$(poetry version --short)
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "New version: $NEW_VERSION"

    - name: Update version in pyproject.toml and commit
      working-directory: ./itf-py
      run: |
        # Commit version bump
        git add pyproject.toml
        git commit -m "ðŸ”– Bump version to ${NEW_VERSION}"
        git push origin main

    - name: Create and push tag
      run: |
        git tag "v${NEW_VERSION}"
        git push origin "v${NEW_VERSION}"

    - name: Build package
      working-directory: ./itf-py
      run: |
        poetry install
        poetry build

    - name: Generate changelog
      run: |
        # Simple changelog generation
        echo "## Changes in v${NEW_VERSION}" > CHANGELOG_ENTRY.md
        echo "" >> CHANGELOG_ENTRY.md
        echo "### What's Changed" >> CHANGELOG_ENTRY.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> CHANGELOG_ENTRY.md
        else
          echo "- Initial release" >> CHANGELOG_ENTRY.md
        fi
        
        echo "" >> CHANGELOG_ENTRY.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/v${NEW_VERSION}" >> CHANGELOG_ENTRY.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v${{ env.NEW_VERSION }}"
        name: "Release v${{ env.NEW_VERSION }}"
        body_path: CHANGELOG_ENTRY.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
        files: |
          itf-py/dist/*
        generate_release_notes: true
